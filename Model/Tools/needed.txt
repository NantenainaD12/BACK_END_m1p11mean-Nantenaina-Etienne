//login cote angular
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable()
export class AuthService {
  constructor(private http: HttpClient) {}

  login(username: string, password: string) {
    this.http.post('http://your-api-url/login', { username, password })
      .subscribe((res: any) => {
        localStorage.setItem('token', res.token);
        localStorage.setItem('idEmploye', res.employee.idEmploye);
      });
  }
}

}


//Appel de fonction apres login

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable()
export class EmployeeService {
  constructor(private http: HttpClient) {}

  updateProfile(nom: string, prenom: string, email: string, pdp: string) {
    const token = localStorage.getItem('token');
    const idEmploye = localStorage.getItem('idEmploye');
    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);

    var updateData = {
      nom: nom,
      prenom: prenom,
      email:email,
      pdp:pdp
    };

    this.http.post(`http://your-api-url/user/updateEmployee/${idEmploye}`, updateData, { headers })
      .subscribe((res: any) => {
        console.log(res);
      });
  }
}




{
    "$expr": {
      "$and": [
        {
          "$eq": [
            { "$dateToString": { "format": "%Y-%m-%d", "date": "$dateHeureFin" } },
            { "$dateToString": { "format": "%Y-%m-%d", "date": new Date() } }
          ]
        },
        {
          "$eq": [ "$etatFini", true ]
        }
      ]
    }
  
}


db.createView(
   "firstYears",
   "students",
   [ { $match: { year: 1 } } ]
)


const today = new Date();

// Créer une date avec le début du jour courant (8:00:00 UTC)
const startOfDay = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(), 0, 0, 0));

// Créer une date avec la fin du jour courant (22:58:00 UTC)
const endOfDay = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(), 23, 58, 0));

db.createView(
    "v_suivitachesjournalieres",
    "rdvs",
    [
        {
            "$match": {
                "dateHeureFin": {
                    "$gte": startOfDay,
                    "$lt" : endOfDay
                },
                "etatFini": true
            }
        }
    ]
)


db.v_suivitachesjournalieres.find()
db.v_suivitachesjournalieres.drop()


db.createView(
    "rdvservices_all_sum", // Nom de la vue
    "rdvservices", // Nom de la collection source
    [ // Pipeline d'agrégation
        {
            $group: {
                _id: { idRdv: "$idRdv", idService: "$idService" },
                totalMontantCommission: { $sum: "$montantCommission" }
            }
        },
        {
            $project: {
                _id: 0,
                idRdv: "$_id.idRdv",
                idService: "$_id.idService",
                totalMontantCommission: 1
            }
        }
    ]
)


db.rdvservices_all_sum.find()

db.rdvservices_all_sum.drop()







rdvFields.statics.getRdvsByIdEmployeAndClient = async function (idEmploye, idClient) {
    try {
        // Récupérer les rdvs par idEmploye
        const rdvs = await this.find({
            idEmploye: idEmploye,
            etatFini: false
        });

        // Sélectionner les idRdv par idClient dans v_suivitachesjournalieres
        const v_suivitachesjournalieres = db.v_suivitachesjournalieres.find({
            idClient: idClient
        });

        // Filtrer les rdvs par les idRdv
        const filteredRdvs = rdvs.filter(rdv => 
            v_suivitachesjournalieres.some(v => v.idRdv === rdv._id)
        );

        // Filtrer rdvservices_all_sum par les idRdv
        const rdvservices_all_sum = db.rdvservices_all_sum.find();
        const filteredSum = rdvservices_all_sum.filter(sum => 
            filteredRdvs.some(rdv => rdv.idService === sum._id)
        );

        return filteredSum;
    } catch (error) {
        console.error('Erreur lors de la récupération des rendez-vous :', error);
        throw error;
    }
};

https://www.bing.com/search?q=Bing+AI&showconv=1&FORM=undexpand


db.v_suivitachesjournalieres.aggregate([
    {
        $match: { idEmploye: 6 } // Remplacez <idEmploye> par l'ID de l'employé que vous voulez rechercher
    },
    {
        $lookup: {
            from: 'rdvservices_all_sum',
            let: { idRdv: '$idRdv' },
            pipeline: [
                {
                    $match: {
                        $expr: {
                            $eq: ['$idRdv', '$$_idRdv']
                        }
                    }
                },
                {
                    $group: {
                        _id: null,
                        totalMontantCommission: { $sum: "$totalMontantCommission" }
                    }
                }
            ],
            as: 'totalMontantCommission'
        }
    },
    {
        $unwind: {
            path: '$totalMontantCommission',
            preserveNullAndEmptyArrays: true
        }
    },
    {
        $addFields: {
            totalMontantCommission: '$totalMontantCommission.totalMontantCommission'
        }
    }
])

///v_RdvExtracted
db.createView(
    "v_RdvExtracted",
    "rdvs",
    [
        {
            $project: {
                idRdv: 1,
                jour: { $dayOfMonth: "$dateHeureDebut" },
                mois: { $month: "$dateHeureDebut" },
                dateDebut: "$dateHeureDebut",
                montant: "$montantTotalPaye"
            }
        }
    ]
)


////v_ReservationParJour
db.createView(
    "v_ReservationParJour",
    "v_RdvExtracted",
    [
        {
            $group: {
                _id: { jour: "$jour", mois: "$mois" },
                count: { $sum: 1 }
            }
        },
        {
            $project: {
                _id: 0,
                jour: "$_id.jour",
                mois: "$_id.mois",
                count: 1
            }
        }
    ]
)

///v_ReservationParMois
db.createView(
    "v_ReservationParMois",
    "v_RdvExtracted",
    [
        {
            $group: {
                _id: { mois: "$mois" },
                count: { $sum: 1 }
            }
        },
        {
            $project: {
                _id: 0,
                mois: "$_id.mois",
                count: 1
            }
        }
    ]
)

///v_ChiffreAffaireParJour
db.createView(
    "v_ChiffreAffaireParJour",
    "v_RdvExtracted",
    [
        {
            $group: {
                _id: { jour: "$jour", mois: "$mois" },
                total: { $sum: "$montant" }
            }
        },
        {
            $project: {
                _id: 0,
                jour: "$_id.jour",
                mois: "$_id.mois",
                total: 1
            }
        }
    ]
)


/// v_ChiffreAffaireParMois
db.createView(
    "v_ChiffreAffaireParMois",
    "v_RdvExtracted",
    [
        {
            $group: {
                _id: { mois: "$mois" },
                total: { $sum: "$montant" }
            }
        },
        {
            $project: {
                _id: 0,
                mois: "$_id.mois",
                total: 1
            }
        }
    ]
)
 
/// v_DepenseExtracted
db.createView(
    "v_DepenseExtracted",
    "depenses",
    [
        {
            $project: {
                jour: { $dayOfMonth: "$dateDepense" },
                mois: { $month: "$dateDepense" },
                montant: 1,
                dateDepense: 1
            }
        }
    ]
)


///v_DepenseParMois
db.createView(
    "v_DepenseParMois",
    "v_DepenseExtracted",
    [
        {
            $group: {
                _id: { mois: "$mois" },
                total: { $sum: "$montant" }
            }
        },
        {
            $project: {
                _id: 0,
                mois: "$_id.mois",
                total: 1
            }
        }
    ]
)


/// Minute extarct 

db.createView("v_RdvToMinute", "rdvs", [
  {
    $project: {
      idRdv: 1,
      idEmploye: 1,
      diffrenceEnMinute: {
        $divide: [
          { $subtract: ["$dateHeureFin", "$dateHeureDebut"] },
          60000 // Conversion de millisecondes en minutes
        ]
      }
    }
  }
]);

db.v_RdvToMinute.drop()

db.v_RdvToMinute.find();


/// Moyen temps travail

db.createView("v_moyenneHeureEmploye", "v_RdvToMinute", [
  {
    $group: {
      _id: "$idEmploye",
      count: { $sum: 1 },
      totalMinutes: { $sum: "$diffrenceEnMinute" }
    }
  },
  {
    $project: {
      idEmploye: "$_id",
      count: 1,
      totalMinutes: 1,
      moyenneMinutes: { $divide: ["$totalMinutes", "$count"] }
    }
  }
]);